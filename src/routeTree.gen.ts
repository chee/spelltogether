/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./root"
import { Route as PagesGamesGamesImport } from "./pages/games/games"
import { Route as PagesHomeHomeImport } from "./pages/home/home"
import { Route as PagesPlayPlayImport } from "./pages/play/play"

// Create/Update Routes

const PagesGamesGamesRoute = PagesGamesGamesImport.update({
  id: "/games",
  path: "/games",
  getParentRoute: () => rootRoute,
} as any)

const PagesHomeHomeRoute = PagesHomeHomeImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const PagesPlayPlayRoute = PagesPlayPlayImport.update({
  id: "/play/$id",
  path: "/play/$id",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/solid-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof PagesHomeHomeImport
      parentRoute: typeof rootRoute
    }
    "/games": {
      id: "/games"
      path: "/games"
      fullPath: "/games"
      preLoaderRoute: typeof PagesGamesGamesImport
      parentRoute: typeof rootRoute
    }
    "/play/$id": {
      id: "/play/$id"
      path: "/play/$id"
      fullPath: "/play/$id"
      preLoaderRoute: typeof PagesPlayPlayImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof PagesHomeHomeRoute
  "/games": typeof PagesGamesGamesRoute
  "/play/$id": typeof PagesPlayPlayRoute
}

export interface FileRoutesByTo {
  "/": typeof PagesHomeHomeRoute
  "/games": typeof PagesGamesGamesRoute
  "/play/$id": typeof PagesPlayPlayRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof PagesHomeHomeRoute
  "/games": typeof PagesGamesGamesRoute
  "/play/$id": typeof PagesPlayPlayRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/games" | "/play/$id"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/games" | "/play/$id"
  id: "__root__" | "/" | "/games" | "/play/$id"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PagesHomeHomeRoute: typeof PagesHomeHomeRoute
  PagesGamesGamesRoute: typeof PagesGamesGamesRoute
  PagesPlayPlayRoute: typeof PagesPlayPlayRoute
}

const rootRouteChildren: RootRouteChildren = {
  PagesHomeHomeRoute: PagesHomeHomeRoute,
  PagesGamesGamesRoute: PagesGamesGamesRoute,
  PagesPlayPlayRoute: PagesPlayPlayRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "../root.tsx",
      "children": [
        "/",
        "/games",
        "/play/$id"
      ]
    },
    "/": {
      "filePath": "../pages/home/home.tsx"
    },
    "/games": {
      "filePath": "../pages/games/games.tsx"
    },
    "/play/$id": {
      "filePath": "../pages/play/play.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
